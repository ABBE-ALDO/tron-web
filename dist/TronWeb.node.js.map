{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"source-map-support/register\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@babel/runtime/helpers/objectSpread\"","webpack:///external \"@babel/runtime/helpers/toConsumableArray\"","webpack:///external \"bignumber.js\"","webpack:///external \"@babel/runtime/helpers/slicedToArray\"","webpack:///external \"axios\"","webpack:///external \"ethers\"","webpack:///external \"js-sha3\"","webpack:///external \"elliptic\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"@babel/runtime/helpers/typeof\"","webpack:///external \"jssha\"","webpack:///external \"validator\"","webpack:///./src/utils/base64.js","webpack:///./src/utils/bytes.js","webpack:///./src/utils/address.js","webpack:///./src/utils/code.js","webpack:///./src/utils/base58.js","webpack:///./src/utils/crypto.js","webpack:///./src/utils/accounts.js","webpack:///./src/utils/index.js","webpack:///./src/lib/providers/index.js","webpack:///./src/lib/providers/HttpProvider.js","webpack:///./src/lib/transactionBuilder.js","webpack:///./src/lib/trx.js","webpack:///./src/lib/witness.js","webpack:///./src/lib/contract/method.js","webpack:///./src/lib/contract/index.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Base64","_this","this","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","length","charCodeAt","isNaN","charAt","encodeIgnoreUtf8","inputBytes","decode","replace","indexOf","String","fromCharCode","_utf8_decode","decodeToByteArray","_out2ByteArray","utftext","byteArray","Array","c1","c2","_utf8_encode","string","c3","byte2hexStr","byte","str","bytesToString","arr","one","toString","v","match","bytesLength","store","slice","st","parseInt","hextoString","hex","split","out","tmp","concat","base64DecodeFromString","string64","byteArray2hexStr","isTestNet","process","env","NET","ADDRESS_SIZE","ADDRESS_PREFIX","ADDRESS_PREFIX_BYTE","bin2String","array","apply","toConsumableArray_default","arrayEquals","array1","array2","stringToBytes","len","bytes","push","code_bytesToString","code_hextoString","hexChar2byte","isHexChar","hexStr2byteArray","j","k","code_byte2hexStr","code_byteArray2hexStr","reduce","code_base64DecodeFromString","base64EncodeToString","strToDate","tempStrs","dateStrs","year","month","day","timeStrs","hour","minute","second","Date","isNumber","getStringType","ALPHABET","ALPHABET_MAP","base58_i","BASE","encode58","buffer","digits","carry","reverse","map","digit","join","decode58","Error","getBase58CheckAddress","addressBytes","checkSum","SHA256","decodeBase58Address","base58Sting","address","offset","checkSum1","signTransaction","priKeyBytes","transaction","signature","ECKeySign","txID","arrayToBase64String","a","btoa","crypto_signBytes","privateKey","contents","getRowBytesFromTransactionBase64","base64Data","bytesDecode","proto","protocol","Transaction","deserializeBinary","getRawData","serializeBinary","genPriKey","priKeyHex","external_elliptic_","genKeyPair","getPrivate","computeAddress","pubBytes","hash","external_js_sha3_","substring","getAddressFromPriKey","getPubKeyFromPriKey","decode58Check","addressStr","decodeCheck","decodeData","hash1","isAddressValid","base58Str","getBase58CheckAddressFromPriKeyBase64String","priKeyBase64String","getHexStrAddressFromPriKeyBase64String","getAddressFromPriKeyBase64String","pubkey","keyFromPrivate","getPublic","x","y","xHex","yHex","hashBytes","sign","id","recoveryParam","rHex","sHex","msgBytes","shaObj","external_jssha_default","msgHex","update","getHash","passwordToAddress","password","pkToAddress","generateAccount","pubKeyBytes","publicKey","base58","utils","isValidURL","url","external_validator_default","isURL","protocols","isObject","obj","isArray","isJson","JSON","parse","ex","isBoolean","bool","isBigNumber","number","external_bignumber_js_default","constructor","isString","isFunction","isHex","isInteger","Number","hasProperty","hasProperties","_len","arguments","properties","_key","includes","injectPromise","func","_len2","args","_key2","Promise","resolve","reject","err","res","promiseInjector","scope","_this2","_len3","_key3","mapEvent","event","block","block_number","timestamp","block_timestamp","contract","contract_address","event_name","transaction_id","result","parseEvent","_ref","abi","inputs","index","_abi$index","type","substr","toLowerCase","src_utils","objectSpread_default","code","code_namespaceObject","accounts","accounts_namespaceObject","base58_namespaceObject","bytes_namespaceObject","crypto","crypto_namespaceObject","providers","HttpProvider","host","timeout","undefined","user","headers","statusPage","classCallCheck_default","instance","external_axios_default","baseURL","auth","request","then","data","catch","payload","method","params","transactionBuilder_TransactionBuilder","TransactionBuilder","tronWeb","src_TronWeb","to","amount","from","defaultAddress","callback","isAddress","toHex","fullNode","to_address","owner_address","sendTrx","tokenID","fromUtf8","asset_name","sendToken","issuerAddress","buyer","purchaseToken","duration","resource","frozen_balance","frozen_duration","freezeBalance","unfreezeBalance","withdrawBlockRewards","applyForSR","votes","voterAddress","vote","keys","invalid","entries","_ref2","slicedToArray_default","srAddress","voteCount","vote_address","vote_count","options","createSmartContract","_options$abi","_options$bytecode","bytecode","_options$feeLimit","feeLimit","_options$callValue","callValue","_options$userFeePerce","userFeePercentage","_options$parameters","parameters","_unused","payable","some","abiCoder","external_ethers_default","AbiCoder","types","values","_parameters$i","fee_limit","call_value","consume_user_resource_percent","stringify","parameter","contractAddress","functionSelector","triggerSmartContract","_parameters$i2","function_selector","message","toUtf8","_this3","createToken","_options$name","_options$abbreviation","abbreviation","_options$description","description","_options$url","_options$totalSupply","totalSupply","_options$trxRatio","trxRatio","_options$tokenRatio","tokenRatio","_options$saleStart","saleStart","now","_options$saleEnd","saleEnd","_options$freeBandwidt","freeBandwidth","_options$freeBandwidt2","freeBandwidthLimit","_options$frozenAmount","frozenAmount","_options$frozenDurati","frozenDuration","abbr","total_supply","trx_num","num","start_time","end_time","free_asset_net_limit","public_free_asset_net_limit","frozen_supply","frozen_amount","frozen_days","_this4","updateToken","_options$description2","_options$url2","_options$freeBandwidt3","_options$freeBandwidt4","new_limit","new_public_limit","_this5","proposalIssuerAddress","createProposal","_this6","proposalVoterAddress","proposalID","isApprovalDecision","proposal_id","is_add_approval","isApproval","voteProposal","_this7","deleteProposal","trx_Trx","Trx","token","getCurrentBlock","defaultBlock","getBlockByHash","getBlockByNumber","getBlock","blockHash","blockID","getBlockTransactionCount","_ref$transactions","transactions","_ref2$transactions","getTransactionFromBlock","transactionID","getTransaction","getTransactionInfo","solidityNode","limit","getTransactionsRelated","getTransactionsToAddress","getTransactionsFromAddress","direction","tx","sort","b","raw_data","_context","t0","account","_ref3","getAccount","getBalance","_ref4","_ref4$balance","balance","_ref5","_ref5$freeNetUsed","freeNetUsed","_ref5$freeNetLimit","freeNetLimit","_ref5$NetUsed","NetUsed","_ref5$NetLimit","NetLimit","getBandwidth","_ref6","_ref6$assetIssue","assetIssue","tokens","parseToken","getTokensIssuedByAddress","getTokenFromID","listNodes","_ref7","_ref7$nodes","nodes","_ref8","_ref8$address","port","start","end","startNum","endNum","_ref9","_ref9$block","getBlockRange","listSuperRepresentatives","_ref10","_ref10$witnesses","witnesses","_ref12","_ref12$assetIssue","_ref11","_ref11$assetIssue","listTokens","timeUntilNextVoteCycle","_ref13","_ref13$num","Math","floor","getContract","defaultPrivateKey","fromPrivateKey","signedTransaction","sendRawTransaction","sendTransaction","transactionBuilder","_context2","_context3","proposal","getProposal","listProposals","_ref14","_ref14$proposals","proposals","getChainParameters","_ref15","_ref15$proposals","getAccountResources","witness_Witness","method_abiCoder","getFunctionSelector","getParamTypes","decodeOutput","names","filter","arg","method_Method","Method","outputs","sha3","defaultOptions","shouldPollResponse","forEach","methodArgs","_call","send","_send","watch","_watch","deployed","stateMutability","constant_result","trx","broadcast","checkResult","_callee2","decoded","_args2","regenerator_default","wrap","prev","next","abrupt","error","sent","setTimeout","resMessage","contractResult","stop","eventServer","listener","lastBlock","getEvents","_callee4","events","_events$sort","_events$sort2","latestEvent","newEvents","_context4","getEventResult","priorEvent","bindListener","clearInterval","setInterval","contract_Contract","Contract","eventListener","methods","props","loadAbi","eventCallback","_getEvents","console","__proto__","prop","methodCall","onMethod","new","at","entrys","self","startCallback","_startEventListener","_stopEventListener","TronWeb","setFullNode","setSolidityNode","setEventServer","BigNumber","setPrivateKey","witness","abs","setAddress","fromHex","provider","knownProvider","isValidProvider","setStatusPage","currentProviders","eventName","blockNumber","routeParams","_ref2$data","response","_ref3$data","getEventByTransacionID","isConnected","isEventServerConnected","val","fromDecimal","typeof_default","isFinite","Buffer","padding","padEnd","toBigNumber","toNumber","lessThan","sun","div","times","solditySource","_unused2"],"mappings":"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","file":"TronWeb.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"source-map-support/register\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/objectSpread\");","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"@babel/runtime/helpers/slicedToArray\");","module.exports = require(\"axios\");","module.exports = require(\"ethers\");","module.exports = require(\"js-sha3\");","module.exports = require(\"elliptic\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@babel/runtime/helpers/typeof\");","module.exports = require(\"jssha\");","module.exports = require(\"validator\");","export function Base64() {\n    this._keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    this.encode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n        \n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.encodeIgnoreUtf8 = inputBytes => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n        \n        while (i < inputBytes.length) {\n            chr1 = inputBytes[i++];\n            chr2 = inputBytes[i++];\n            chr3 = inputBytes[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if (isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.decode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = _keyStr.indexOf(input.charAt(i++));\n            enc2 = _keyStr.indexOf(input.charAt(i++));\n            enc3 = _keyStr.indexOf(input.charAt(i++));\n            enc4 = _keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n                \n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n        \n        return this._utf8_decode(output);\n    }\n\n    this.decodeToByteArray = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = _keyStr.indexOf(input.charAt(i++));\n            enc2 = _keyStr.indexOf(input.charAt(i++));\n            enc3 = _keyStr.indexOf(input.charAt(i++));\n            enc4 = _keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if (enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n        \n        return this._out2ByteArray(output);\n    }\n\n    this._out2ByteArray = utftext => {\n        const byteArray = new Array(utftext.length);\n\n        let i = 0;\n        let c = c1 = c2 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n            byteArray[i] = c;\n            i++;\n        }\n\n        return byteArray;\n    }\n\n    this._utf8_encode = string => {\n        string = string.replace(/\\r\\n/g, \"\\n\");\n        let utftext = \"\";\n\n        for (let n = 0; n < string.length; n++) {\n            const c = string.charCodeAt(n);\n\n            if (c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if ((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    }\n\n    this._utf8_decode = utftext => {\n        let string = \"\";\n        let i = 0;\n        let c = c1 = c2 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n\n            if (c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if ((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\n                i += 3;\n            }\n        }\n\n        return string;\n    }\n}","import { Base64 } from './base64';\n\nexport function byte2hexStr(byte) {\n    const hexByteMap = '0123456789ABCDEF';\n\n    let str = '';\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n        \n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length === 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else {\n            str += String.fromCharCode(arr[i]);\n        }\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.split('');\n    let out = '';\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        let tmp = `0x${ arr[i * 2] }${ arr[i * 2 + 1] }`;\n        out += String.fromCharCode(tmp);\n    }\n\n    return out;\n}\n\nexport function base64DecodeFromString(string64) {\n    return new Base64().decodeToByteArray(string64);\n}\n\nexport function byteArray2hexStr(byteArray) {\n    let str = '';\n\n    for (let i = 0; i < (byteArray.length); i++)\n        str += byte2hexStr(byteArray[i]);\n        \n    return str;\n}","const isTestNet = process.env.NET === 'testnet';\n\nexport const ADDRESS_SIZE = isTestNet ? 35 : 34;\nexport const ADDRESS_PREFIX = isTestNet ? \"a0\" : \"41\";\nexport const ADDRESS_PREFIX_BYTE = isTestNet ? 0xa0 : 0x41;\n","import { Base64 } from './base64';\n\nexport function bin2String(array) {\n    return String.fromCharCode(...array);\n}\n\nexport function arrayEquals(array1, array2) {\n    if (array1.length != array2.length)\n        return false;\n        \n    let i;\n\n    for (i = 0; i < array1.length; i++) {\n        if (array1[i] != array2[i])\n            return false;\n    }\n\n    return true;\n}\n\nexport function stringToBytes(str) {\n    const bytes = new Array();\n    let len;\n    let c;\n\n    len = str.length;\n\n    for (let i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n\n        if (c >= 0x010000 && c <= 0x10FFFF) {\n            bytes.push(((c >> 18) & 0x07) | 0xF0);\n            bytes.push(((c >> 12) & 0x3F) | 0x80);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000800 && c <= 0x00FFFF) {\n            bytes.push(((c >> 12) & 0x0F) | 0xE0);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if (c >= 0x000080 && c <= 0x0007FF) {\n            bytes.push(((c >> 6) & 0x1F) | 0xC0);\n            bytes.push((c & 0x3F) | 0x80);\n        } else bytes.push(c & 0xFF);\n    }\n\n    return bytes;\n}\n\nexport function bytesToString(arr) {\n    if (typeof arr === 'string')\n        return arr;\n        \n    let str = '';\n\n    for (let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if (v && one.length == 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for (let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else str += String.fromCharCode(arr[i]);\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.split(\"\");\n    let out = \"\";\n\n    for (let i = 0; i < arr.length / 2; i++) {\n        const tmp = `0x${arr[i * 2]}${arr[i * 2 + 1]}`;\n        const charValue = String.fromCharCode(tmp);\n\n        out += charValue;\n    }\n\n    return out\n}\n\nexport function hexChar2byte(c) {\n    let d = 0;\n\n    if (c >= 'A' && c <= 'F')\n        d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    else if (c >= 'a' && c <= 'f')\n        d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    else if (c >= '0' && c <= '9')\n        d = c.charCodeAt(0) - '0'.charCodeAt(0);\n        \n    return d;\n}\n\nexport function isHexChar(c) {\n    if ((c >= 'A' && c <= 'F') ||\n        (c >= 'a' && c <= 'f') ||\n        (c >= '0' && c <= '9')) {\n        return 1;\n    }\n\n    return 0;\n}\n\nexport function hexStr2byteArray(str) {\n    const byteArray = Array();\n    let d = 0;\n    let j = 0;\n    let k = 0;\n\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charAt(i);\n\n        if (isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n\n            if (0 === (j % 2)) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        }\n    }\n\n    return byteArray;\n}\n\nexport function byte2hexStr(byte) {\n    const hexByteMap = \"0123456789ABCDEF\";\n    let str = \"\";\n\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function byteArray2hexStr(byteArray) {\n    return byteArray.reduce((string, byte) => {\n        return string + byte2hexStr(byte);\n    }, '');\n}\n\nexport function base64DecodeFromString(string64) {\n    const b = new Base64();\n    const decodeBytes = b.decodeToByteArray(string64);\n\n    return decodeBytes;\n}\n\nexport function base64EncodeToString(bytes) {\n    const b = new Base64();\n    const string64 = b.encodeIgnoreUtf8(bytes);\n\n    return string64\n}\n\n//yyyy-MM-DD HH-mm-ss\nexport function strToDate(str) {\n    const tempStrs = str.split(\" \");\n    const dateStrs = tempStrs[0].split(\"-\");\n    const year = parseInt(dateStrs[0], 10);\n    const month = parseInt(dateStrs[1], 10) - 1;\n    const day = parseInt(dateStrs[2], 10);\n\n    if (tempStrs.length > 1) {\n        const timeStrs = tempStrs[1].split(\"-\");\n        const hour = parseInt(timeStrs[0], 10);\n        const minute = parseInt(timeStrs[1], 10) - 1;\n        const second = parseInt(timeStrs[2], 10);\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    return new Date(year, month, day);\n}\n\nexport function isNumber(c) {\n    if (c >= '0' && c <= '9')\n        return 1;\n        \n    return 0;\n}\n\n//return 1: address  --- 20Bytes HexString\n//return 2: blockNumber ------ Decimal number\n//return 3: assetName ------ String\n//return other: error\nexport function getStringType(str) {\n    if (null == str)\n        return -1;\n\n    if (typeof (str) != 'string')\n        return -1;\n\n    if (str.length == 0 || str == \"\")\n        return -1;\n\n    let i = 0;\n\n    if (str.length == 40) {\n        for (; i < 40; i++) {\n            var c = str.charAt(i);\n\n            if (!isHexChar(c))\n                break;\n        }\n    }\n\n    if (i == 40)\n        return 1; //40 Hex, Address\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (!isNumber(c))\n            break;\n    }\n\n    if (i == str.length)\n        return 2; //Alll Decimal number, BlockNumber\n\n    for (i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if (c > ' ')\n            return 3; //At least one visible character\n    }\n\n    return -1;\n}","const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst ALPHABET_MAP = {};\n\nfor (let i = 0; i < ALPHABET.length; i++)\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n\nconst BASE = 58;\n\nexport function encode58(buffer) {\n    if (buffer.length === 0) \n        return '';\n\n    let i;\n    let j;\n\n    const digits = [0];\n\n    for (i = 0; i < buffer.length; i++) {\n        for (j = 0; j < digits.length; j++) \n            digits[j] <<= 8;\n\n        digits[0] += buffer[i];\n        let carry = 0;\n\n        for (j = 0; j < digits.length; ++j) {\n            digits[j] += carry;\n            carry = (digits[j] / BASE) | 0;\n            digits[j] %= BASE\n        }\n\n        while (carry) {\n            digits.push(carry % BASE);\n            carry = (carry / BASE) | 0\n        }\n    }\n\n    for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) \n        digits.push(0);\n\n    return digits.reverse().map(digit => ALPHABET[digit]).join('');\n}\n\nexport function decode58(string) {\n    if (string.length === 0) \n        return [];\n\n    let i;\n    let j;\n\n    const bytes = [0];\n\n    for (i = 0; i < string.length; i++) {\n        const c = string[i];\n\n        if (!(c in ALPHABET_MAP))\n            throw new Error('Non-base58 character');\n\n        for (j = 0; j < bytes.length; j++) \n            bytes[j] *= BASE;\n\n        bytes[0] += ALPHABET_MAP[c];\n        let carry = 0;\n\n        for (j = 0; j < bytes.length; ++j) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xff;\n        }\n\n        while (carry) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n    }\n\n    for (i = 0; string[i] === '1' && i < string.length - 1; i++)\n        bytes.push(0);\n\n    return bytes.reverse();\n}","import jsSHA from 'jssha';\n\nimport { ADDRESS_PREFIX, ADDRESS_PREFIX_BYTE } from './address';\nimport { base64EncodeToString } from './code';\nimport { base64DecodeFromString, hexStr2byteArray } from './code';\nimport { encode58, decode58 } from './base58';\nimport { keccak256 } from 'js-sha3';\nimport { ADDRESS_SIZE } from './address';\nimport { byte2hexStr, byteArray2hexStr } from './bytes';\nimport { ec as EC } from 'elliptic';\n\nexport function getBase58CheckAddress(addressBytes) {\n    const hash0 = SHA256(addressBytes);\n    const hash1 = SHA256(hash0);\n\n    let checkSum = hash1.slice(0, 4);\n    checkSum = addressBytes.concat(checkSum);\n\n    return encode58(checkSum);\n}\n\nexport function decodeBase58Address(base58Sting) {\n    if (typeof (base58Sting) != 'string')\n        return false;\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    let address = decode58(base58Sting);\n\n    if (base58Sting.length <= 4)\n        return false;\n\n    const len = address.length;\n    const offset = len - 4;\n    const checkSum = address.slice(offset);\n\n    address = address.slice(0, offset);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return address;\n    }\n\n    return hexStr2byteArray('000000000000000000000000000000000000000000');\n}\n\nexport function signTransaction(priKeyBytes, transaction) {\n    if (typeof priKeyBytes === 'string')\n        priKeyBytes = hexStr2byteArray(priKeyBytes);\n\n    const txID = transaction.txID;\n    const signature = ECKeySign(hexStr2byteArray(txID), priKeyBytes);\n\n    transaction.signature = [ signature ];\n    return transaction;\n}\n\nexport function arrayToBase64String(a) {\n    return btoa(String.fromCharCode(...a));\n}\n\nexport function signBytes(privateKey, contents) {\n    if (typeof privateKey === 'string')\n        privateKey = hexStr2byteArray(privateKey);\n\n    const hashBytes = SHA256(contents);\n    const signBytes = ECKeySign(hashBytes, privateKey);\n\n    return signBytes;\n}\n\nexport function getRowBytesFromTransactionBase64(base64Data) {\n    const bytesDecode = base64DecodeFromString(base64Data);\n    const transaction = proto.protocol.Transaction.deserializeBinary(bytesDecode);\n    const raw = transaction.getRawData();\n\n    return raw.serializeBinary();\n}\n\nexport function genPriKey() {\n    const ec = new EC('secp256k1');\n    const key = ec.genKeyPair();\n    const priKey = key.getPrivate();\n\n    let priKeyHex = priKey.toString('hex');\n\n    while (priKeyHex.length < 64) {\n        priKeyHex = `0${priKeyHex}`;\n    }\n\n    return hexStr2byteArray(priKeyHex);\n}\n\nexport function computeAddress(pubBytes) {\n    if (pubBytes.length === 65)\n        pubBytes = pubBytes.slice(1);\n\n    const hash = keccak256(pubBytes).toString();\n    const addressHex = ADDRESS_PREFIX + hash.substring(24);\n\n    return hexStr2byteArray(addressHex);\n}\n\nexport function getAddressFromPriKey(priKeyBytes) {\n    let pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    return computeAddress(pubBytes);\n}\n\nexport function decode58Check(addressStr) {\n    const decodeCheck = decode58(addressStr);\n\n    if (decodeCheck.length <= 4)\n        return false;\n\n    const decodeData = decodeCheck.slice(0, decodeCheck.length - 4);\n    const hash0 = SHA256(decodeData);\n    const hash1 = SHA256(hash0);\n\n    if (hash1[0] === decodeCheck[decodeData.length] &&\n        hash1[1] === decodeCheck[decodeData.length + 1] &&\n        hash1[2] === decodeCheck[decodeData.length + 2] &&\n        hash1[3] === decodeCheck[decodeData.length + 3]) {\n        return decodeData;\n    }\n\n    return false;\n}\n\nexport function isAddressValid(base58Str) {\n    if (typeof (base58Str) !== 'string')\n        return false;\n        \n    if (base58Str.length !== ADDRESS_SIZE)\n        return false;\n\n    let address = decode58(base58Str);\n\n    if (address.length !== 25)\n        return false;\n        \n    if (address[0] !== ADDRESS_PREFIX_BYTE)\n        return false;\n        \n    const checkSum = address.slice(21);\n    address = address.slice(0, 21);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if (checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return true\n    }\n\n    return false;\n}\n\nexport function getBase58CheckAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n\n    return getBase58CheckAddress(addressBytes);\n}\n\nexport function getHexStrAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressHex = byteArray2hexStr(addressBytes);\n\n    return addressHex;\n}\n\nexport function getAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressBase64 = base64EncodeToString(addressBytes);\n\n    return addressBase64;\n}\n\nexport function getPubKeyFromPriKey(priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const pubkey = key.getPublic();\n    const x = pubkey.x;\n    const y = pubkey.y;\n\n    let xHex = x.toString('hex');\n\n    while (xHex.length < 64) {\n        xHex = `0${xHex}`;\n    }\n\n    let yHex = y.toString('hex');\n\n    while (yHex.length < 64) {\n        yHex = `0${yHex}`;\n    }\n\n    const pubkeyHex = `04${xHex}${yHex}`;\n    const pubkeyBytes = hexStr2byteArray(pubkeyHex);\n\n    return pubkeyBytes;\n}\n\nexport function ECKeySign(hashBytes, priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const signature = key.sign(hashBytes);\n    const r = signature.r;\n    const s = signature.s;\n    const id = signature.recoveryParam;\n\n    let rHex = r.toString('hex');\n\n    while (rHex.length < 64) {\n        rHex = `0${rHex}`;\n    }\n\n    let sHex = s.toString('hex');\n\n    while (sHex.length < 64) {\n        sHex = `0${sHex}`;\n    }\n\n    const idHex = byte2hexStr(id);\n    const signHex = rHex + sHex + idHex;\n\n    return signHex;\n}\n\nexport function SHA256(msgBytes) {\n    const shaObj = new jsSHA('SHA-256', 'HEX');\n    const msgHex = byteArray2hexStr(msgBytes);\n\n    shaObj.update(msgHex);\n    const hashHex = shaObj.getHash('HEX');\n\n    return hexStr2byteArray(hashHex);\n}\n\nexport function passwordToAddress(password) {\n    const com_priKeyBytes = base64DecodeFromString(password);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n\nexport function pkToAddress(privateKey) {\n    const com_priKeyBytes = hexStr2byteArray(privateKey);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}","import { byteArray2hexStr } from './bytes';\nimport { \n    getBase58CheckAddress,\n    genPriKey,\n    getAddressFromPriKey,\n    getPubKeyFromPriKey\n} from './crypto';\n\nexport function generateAccount() {\n    const priKeyBytes = genPriKey();\n    const pubKeyBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = getAddressFromPriKey(priKeyBytes);\n    \n    const privateKey = byteArray2hexStr(priKeyBytes);\n    const publicKey = byteArray2hexStr(pubKeyBytes);\n\n    return {\n        privateKey,\n        publicKey,\n        address: {\n            base58: getBase58CheckAddress(addressBytes),\n            hex: byteArray2hexStr(addressBytes)\n        }\n    }\n}","import * as accounts from './accounts';\nimport * as base58 from './base58';\nimport * as bytes from './bytes';\nimport * as crypto from './crypto';\nimport * as code from './code';\n\nimport validator from 'validator';\nimport BigNumber from 'bignumber.js';\n\nconst utils = {\n    isValidURL(url) {\n        return validator.isURL(url.toString(), {\n            protocols: [ 'http', 'https' ]\n        });\n    },\n\n    isObject(obj) {\n        return obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]';\n    },\n\n    isArray(array) {\n        return Array.isArray(array);\n    },\n\n    isJson(string) {\n        try {\n            return !!JSON.parse(string);\n        } catch (ex) {\n            return false;\n        }\n    },\n\n    isBoolean(bool) {\n        return typeof bool === 'boolean';\n    },\n\n    isBigNumber(number) {\n        return number && (number instanceof BigNumber || (number.constructor && number.constructor.name === 'BigNumber'));\n    },\n\n    isString(string) {\n        return typeof string === 'string' || (string && string.constructor && string.constructor.name === 'String');\n    },\n\n    isFunction(obj) {\n        return typeof obj === 'function';\n    },\n\n    isHex(string) {\n        return typeof string === 'string' && !isNaN(parseInt(string, 16));\n    },\n\n    isInteger(number) {\n        return Number.isInteger(\n            Number(number)\n        );\n    },\n\n    hasProperty(obj, property) {\n        return Object.prototype.hasOwnProperty.call(obj, property);\n    },\n\n    hasProperties(obj, ...properties) {\n        return properties.length && !properties.map(property => {\n            return this.hasProperty(obj, property)\n        }).includes(false);\n    },\n\n    injectPromise(func, ...args) {\n        return new Promise((resolve, reject) => {\n            func(...args, (err, res) => {\n                if(err)\n                    reject(err);\n                else resolve(res);\n            });\n        });\n    },\n\n    promiseInjector(scope) {\n        return (func, ...args) => {\n            return this.injectPromise(func.bind(scope), ...args);\n        }\n    },\n\n    mapEvent(event) {\n        return {\n            block: event.block_number,\n            timestamp: event.block_timestamp,\n            contract: event.contract_address,\n            name: event.event_name,\n            transaction: event.transaction_id,\n            result: event.result\n        };\n    },\n\n    parseEvent(event, { inputs: abi }) {\n        if(!event.result)\n            return event;\n\n        event.result = event.result.reduce((obj, result, index) => {\n            const {\n                name,\n                type\n            } = abi[index];\n\n            if(type == 'address')\n                result = '41' + result.substr(2).toLowerCase();\n\n            obj[name] = result;\n\n            return obj;\n        }, {});\n\n        return event;\n    }\n}\n\nexport default {\n    ...utils,\n    code,\n    accounts,\n    base58,\n    bytes,\n    crypto\n};","import HttpProvider from './HttpProvider';\n\nexport default {\n    HttpProvider\n};","import axios from 'axios';\nimport utils from 'utils';\n\nexport default class HttpProvider {\n    constructor(host, timeout = 30000, user = false, password = false, headers = {}, statusPage = '/') {\n        if(!utils.isValidURL(host))\n            throw new Error('Invalid URL provided to HttpProvider');\n\n        if(isNaN(timeout) || timeout < 0)\n            throw new Error('Invalid timeout duration provided');\n\n        if(!utils.isObject(headers))\n            throw new Error('Invalid headers object provided');\n\n        if(host.charAt(host.length - 1) === '/')\n            host = host.substr(0, host.length - 2);\n\n        this.host = host;\n        this.timeout = timeout;\n        this.user = user;\n        this.password = password;\n        this.headers = headers;\n        this.statusPage = statusPage;\n\n        this.instance = axios.create({            \n            baseURL: host,\n            timeout: timeout,\n            headers: headers,\n            auth: user && {\n                user,\n                password\n            },\n        });\n    }\n\n    setStatusPage(statusPage = '/') {\n        this.statusPage = statusPage;\n    }\n\n    async isConnected(statusPage = this.statusPage) {\n        return this.request(statusPage).then(data => {\n            return utils.hasProperties(data, 'blockID', 'block_header');\n        }).catch(() => false);\n    }\n\n    request(url, payload = {}, method = 'get') {\n        method = method.toLowerCase();\n\n        return this.instance.request({\n            data: method == 'post' && payload,\n            params: method =='get' && payload,\n            url,\n            method\n        }).then(({ data }) => data);\n    }\n};","import TronWeb from 'index';\nimport utils from 'utils';\nimport Ethers from 'ethers';\n\nexport default class TransactionBuilder {\n    constructor(tronWeb = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    sendTrx(to = false, amount = 0, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.sendTrx, to, amount, from);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.tronWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.tronWeb.address.toHex(to);\n        from = this.tronWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer TRX to the same account');\n\n        this.tronWeb.fullNode.request('wallet/createtransaction', {\n            to_address: to,\n            owner_address: from,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    sendToken(to = false, amount = 0, tokenID = false, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, from);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!this.tronWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.tronWeb.address.toHex(to);\n        tokenID = this.tronWeb.fromUtf8(tokenID);\n        from = this.tronWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer tokens to the same account');\n\n        this.tronWeb.fullNode.request('wallet/transferasset', {\n            to_address: to,\n            owner_address: from,\n            asset_name: tokenID,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    purchaseToken(issuerAddress = false, tokenID = false, amount = 0, buyer = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(buyer)) {\n            callback = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        }\n        \n        if(!callback)\n            return this.injectPromise(this.purchaseToken, issuerAddress, tokenID, amount, buyer);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.tronWeb.isAddress(buyer))\n            return callback('Invalid buyer address provided');\n\n        this.tronWeb.fullNode.request('wallet/participateassetissue', {\n            to_address: this.tronWeb.address.toHex(issuerAddress),\n            owner_address: this.tronWeb.address.toHex(buyer),\n            asset_name: this.tronWeb.fromUtf8(tokenID),\n            amount: parseInt(amount)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    freezeBalance(address = this.tronWeb.defaultAddress.hex, amount = 0, duration = 3, resource = \"BANDWIDTH\", callback = false) {\n        if(utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n            \n        if(!callback)\n            return this.injectPromise(this.freezeBalance, address, amount, duration, resource);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        this.tronWeb.fullNode.request('wallet/freezebalance', {\n            owner_address: this.tronWeb.address.toHex(address),\n            frozen_balance: parseInt(amount),\n            frozen_duration: parseInt(duration),\n            resource: resource\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    unfreezeBalance(address = this.tronWeb.defaultAddress.hex, resource = \"BANDWIDTH\", callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if(!callback)\n            return this.injectPromise(this.unfreezeBalance, address, resource);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n        \n        this.tronWeb.fullNode.request('wallet/unfreezebalance', {\n            owner_address: this.tronWeb.address.toHex(address),\n            resource: resource\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    withdrawBlockRewards(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.withdrawBlockRewards, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n        \n        this.tronWeb.fullNode.request('wallet/withdrawbalance', {\n            owner_address: this.tronWeb.address.toHex(address)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    applyForSR(address = this.tronWeb.defaultAddress.hex, url = false, callback = false) {\n        if(utils.isValidURL(address)) {\n            callback = url || false;\n            url = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.applyForSR, address, url);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isValidURL(url))\n            return callback('Invalid url provided');\n        \n        this.tronWeb.fullNode.request('wallet/createwitness', {\n            owner_address: this.tronWeb.address.toHex(address),\n            url: this.tronWeb.fromUtf8(url)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    vote(votes = {}, voterAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.vote, votes, voterAddress);\n\n        if(!utils.isObject(votes) || !Object.keys(votes).length)\n            return callback('Invalid votes object provided');\n\n        if(!this.tronWeb.isAddress(voterAddress))\n            return callback('Invalid voter address provided');\n\n        let invalid = false;\n\n        votes = Object.entries(votes).map(([ srAddress, voteCount ]) => {\n            if(invalid)\n                return;\n\n            if(!this.tronWeb.isAddress(srAddress)) {\n                callback('Invalid SR address provided: ' + srAddress);\n                return invalid = true;\n            }\n\n            if(!utils.isInteger(voteCount) || voteCount <= 0) {\n                callback('Invalid vote count provided for SR: ' + srAddress);\n                return invalid = true;\n            }\n\n            return {\n                vote_address: this.tronWeb.address.toHex(srAddress),\n                vote_count: parseInt(voteCount)\n            };\n        });\n\n        if(invalid)\n            return;\n\n        this.tronWeb.fullNode.request('wallet/votewitnessaccount', {\n            owner_address: this.tronWeb.address.toHex(voterAddress),\n            votes\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    createSmartContract(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createSmartContract, options, issuerAddress);\n\n        let {\n            abi = false,\n            bytecode = false,\n            feeLimit = 1_000_000_000,\n            callValue = 0,\n            userFeePercentage = 0,\n            parameters = []\n        } = options;\n\n        if(abi && utils.isString(abi)) {\n            try {\n                abi = JSON.parse(abi);\n            } catch{\n                return callback('Invalid options.abi provided');\n            }\n        }\n\n        if(!utils.isArray(abi))\n            return callback('Invalid options.abi provided');\n\n        const payable = abi.some(func => {\n            return func.type == 'constructor' && func.payable;\n        });\n\n        if(!utils.isHex(bytecode))\n            return callback('Invalid options.bytecode provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid options.feeLimit provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid options.callValue provided');\n\n        if(payable && callValue == 0)\n            return callback('When contract is payable, options.callValue must be a positive integer');\n\n        if(!payable && callValue > 0)\n            return callback('When contract is not payable, options.callValue must be 0');\n\n        if(!utils.isInteger(userFeePercentage) || userFeePercentage < 0 || userFeePercentage > 100)\n            return callback('Invalid options.userFeePercentage provided');\n\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        if(parameters.length) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            const types = [];\n            const values = [];\n\n            for(let i = 0; i < parameters.length; i++) {\n                let { type, value } = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.tronWeb.address.toHex(value).replace(/^(41)/, '0x');\n                    \n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        this.tronWeb.fullNode.request('wallet/deploycontract', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            consume_user_resource_percent: userFeePercentage,\n            abi: JSON.stringify(abi),\n            bytecode,\n            parameter: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    triggerSmartContract(\n        contractAddress, \n        functionSelector,\n        feeLimit = 1_000_000_000,\n        callValue = 0,\n        parameters = [], \n        issuerAddress = this.tronWeb.defaultAddress.hex, \n        callback = false\n    ) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(parameters)) {\n            callback = parameters;\n            parameters = [];\n        }\n\n        if(utils.isFunction(callValue)) {\n            callback = callValue;\n            callValue = 0;\n        }\n\n        if(utils.isFunction(feeLimit)) {\n            callback = feeLimit;\n            feeLimit = 1_000_000_000;\n        }\n\n        if(!callback) {\n            return this.injectPromise(\n                this.triggerSmartContract, \n                contractAddress, \n                functionSelector, \n                feeLimit,\n                callValue, \n                parameters,\n                issuerAddress\n            );\n        }\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(!utils.isString(functionSelector) || !functionSelector.length)\n            return callback('Invalid function selector provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid call value provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid fee limit provided');\n\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        functionSelector = functionSelector.replace('/\\s*/g', '');\n\n        if(parameters.length) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            const types = [];\n            const values = [];\n\n            for(let i = 0; i < parameters.length; i++) {\n                let { type, value } = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.tronWeb.address.toHex(value).replace(/^(41)/, '0x');\n                    \n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        this.tronWeb.fullNode.request('wallet/triggersmartcontract', {\n            contract_address: this.tronWeb.address.toHex(contractAddress),\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            function_selector: functionSelector,\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            parameter: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            if(!transaction.result.result)\n                return callback(transaction);\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    createToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createToken, options, issuerAddress);\n\n        const {\n            name = false,\n            abbreviation = false,\n            description = false,\n            url = false,\n            totalSupply = 0,\n            trxRatio = 1, // How much TRX will `tokenRatio` cost?\n            tokenRatio = 1, // How many tokens will `trxRatio` afford?\n            saleStart = Date.now(),\n            saleEnd = false,            \n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0, // Out of `totalFreeBandwidth`, the amount each token holder get\n            frozenAmount = 0,\n            frozenDuration = 0\n        } = options;\n\n        if(!utils.isString(name) || !name.length)\n            return callback('Invalid token name provided');\n\n        if(!utils.isString(abbreviation) || !abbreviation.length)\n            return callback('Invalid token abbreviation provided');\n\n        if(!utils.isInteger(totalSupply) || totalSupply <= 0)\n            return callback('Invalid supply amount provided');\n\n        if(!utils.isInteger(trxRatio) || trxRatio <= 0)\n            return callback('TRX ratio must be a positive integer');\n\n        if(!utils.isInteger(tokenRatio) || tokenRatio <= 0)\n            return callback('Token ratio must be a positive integer');\n\n        if(!utils.isInteger(saleStart) || saleStart < Date.now())\n            return callback('Invalid sale start timestamp provided');\n\n        if(!utils.isInteger(saleEnd) || saleEnd <= saleStart)\n            return callback('Invalid sale end timestamp provided');\n\n        if(!utils.isString(description) || !description.length)\n            return callback('Invalid token description provided');\n\n        if(!utils.isString(url) || !url.length || !utils.isValidURL(url))\n            return callback('Invalid token url provided');\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!utils.isInteger(frozenAmount) || frozenAmount < 0 || (!frozenDuration && frozenAmount))\n            return callback('Invalid frozen supply provided');\n\n        if(!utils.isInteger(frozenDuration) || frozenDuration < 0 || (frozenDuration && !frozenAmount))\n            return callback('Invalid frozen duration provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        this.tronWeb.fullNode.request('wallet/createassetissue', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            name: this.tronWeb.fromUtf8(name),\n            abbr: this.tronWeb.fromUtf8(abbreviation),\n            description: this.tronWeb.fromUtf8(description),\n            url: this.tronWeb.fromUtf8(url),\n            total_supply: parseInt(totalSupply),\n            trx_num: parseInt(trxRatio),\n            num: parseInt(tokenRatio),\n            start_time: parseInt(saleStart),\n            end_time: parseInt(saleEnd),\n            free_asset_net_limit: parseInt(freeBandwidth),\n            public_free_asset_net_limit: parseInt(freeBandwidthLimit),\n            frozen_supply: {\n                frozen_amount: parseInt(frozenAmount),\n                frozen_days: parseInt(frozenDuration)\n            }\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    updateToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.updateToken, options, issuerAddress);\n\n        const {\n            description = false,\n            url = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0 // Out of `totalFreeBandwidth`, the amount each token holder get\n        } = options;\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        this.tronWeb.fullNode.request('wallet/updateasset', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            description: this.tronWeb.fromUtf8(description),\n            url: this.tronWeb.fromUtf8(url),\n            new_limit: parseInt(freeBandwidth),\n            new_public_limit: parseInt(freeBandwidthLimit)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    purchaseAsset(...args) {\n        return this.purchaseToken(...args);\n    }\n\n    createAsset(...args) {\n        return this.createToken(...args);\n    }\n\n    updateAsset(...args) {\n        return this.updateToken(...args);\n    }\n\n    /**\n     * Creates a proposal to modify the network.\n     * Can only be created by a current Super Representative.\n     */\n    createProposal(proposalIssuerAddress = this.tronWeb.defaultAddress.hex, parameters = false, callback = false) {\n        if(!parameters)\n            return callback('Invalid proposal parameters provided');\n\n        if(!callback)\n            return this.injectPromise(this.createProposal, proposalIssuerAddress, parameters);\n\n        if(!this.tronWeb.isAddress(proposalIssuerAddress))\n            return callback('Invalid proposalIssuerAddress provided');\n\n        if(!utils.isObject(parameters))\n            return callback('Invalid parameters provided');\n\n        this.tronWeb.fullNode.request('wallet/proposalcreate', {\n            owner_address: this.tronWeb.address.toHex(proposalIssuerAddress),\n            parameters: parameters\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds a vote to an issued network modification proposal.\n     * Only current Super Representative can vote on a proposal.\n     */\n    voteProposal(proposalVoterAddress = this.tronWeb.defaultAddress.hex, proposalID = false, isApprovalDecision = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.voteProposal, proposalVoterAddress, proposalID, isApprovalDecision);\n\n        if(!this.tronWeb.isAddress(proposalVoterAddress))\n            return callback('Invalid proposalVoterAddress address provided');\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        if(!utils.isString(isApprovalDecision))\n            return callback('Invalid isApprovalDecision provided');\n\n        this.tronWeb.fullNode.request('wallet/proposalapprove', {\n            owner_address: this.tronWeb.address.toHex(proposalVoterAddress),\n            proposal_id: parseInt(proposalID),\n            is_add_approval: isApproval\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Deletes a network modification proposal that the owner issued.\n     * Only current Super Representative can vote on a proposal.\n     */\n    deleteProposal(proposalIssuerAddress = this.tronWeb.defaultAddress.hex, proposalID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.deleteProposal, proposalIssuerAddress, proposalID);\n\n        if(!this.tronWeb.isAddress(proposalIssuerAddress))\n            return callback('Invalid proposalIssuerAddress provided');\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/proposaldelete', {\n            owner_address: this.tronWeb.address.toHex(proposalIssuerAddress),\n            proposal_id: parseInt(proposalID)\n        }, 'post').then(transaction => {\n            if(transaction.Error)\n                return callback(transaction.Error);\n\n            if(transaction.result && transaction.result.message) {\n                return callback(\n                    this.tronWeb.toUtf8(transaction.result.message)\n                );\n            }\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n}","import TronWeb from 'index';\nimport utils from 'utils';\n\nexport default class Trx {\n    constructor(tronWeb = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    parseToken(token) {\n        return {\n            ...token,\n            name: this.tronWeb.toUtf8(token.name),\n            abbr: token.abbr && this.tronWeb.toUtf8(token.abbr),\n            description: token.description && this.tronWeb.toUtf8(token.description),\n            url: token.url && this.tronWeb.toUtf8(token.url)\n        };\n    }\n\n    getCurrentBlock(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getCurrentBlock);\n\n        this.tronWeb.fullNode.request('wallet/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlock(block = this.tronWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlock, block);\n\n        if(block === false)\n            return callback('No block identifier provided');\n\n        if(block == 'earliest')\n            block = 0;\n\n        if(block == 'latest')\n            return this.getCurrentBlock(callback);\n\n        if(isNaN(block) && utils.isHex(block))\n            return this.getBlockByHash(block, callback);\n\n        this.getBlockByNumber(block, callback);\n    }\n\n    getBlockByHash(blockHash, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByHash, blockHash);\n\n        this.tronWeb.fullNode.request('wallet/getblockbyid', { \n            value: blockHash \n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockByNumber(blockID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByNumber, blockID);\n\n        if(!utils.isInteger(blockID) || blockID < 0)\n            return callback('Invalid block number provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbynum', { \n            num: parseInt(blockID) \n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockTransactionCount(block = this.tronWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockTransactionCount, block);\n\n        this.getBlock(block).then(({ transactions = [] }) => {\n            callback(null, transactions.length);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionFromBlock(block = this.tronWeb.defaultBlock, index = 0, callback = false) {\n        if(utils.isFunction(index)) {\n            callback = index;\n            index = 0;\n        }\n        \n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionFromBlock, block, index);\n\n        if(!utils.isInteger(index) || index < 0)\n            return callback('Invalid transaction index provided');\n\n        this.getBlock(block).then(({ transactions = false }) => {\n            if(!transactions || transactions.length < index)\n                return callback('Transaction not found in block');\n\n            callback(null, transactions[index]);\n        }).catch(err => callback(err));\n    }\n\n    getTransaction(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransaction, transactionID);\n\n        this.tronWeb.fullNode.request('wallet/gettransactionbyid', { \n            value: transactionID \n        }, 'post').then(transaction => {\n            if(!Object.keys(transaction).length)\n                return callback('Transaction not found');\n                \n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionInfo(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransactionInfo, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactioninfobyid', { \n            value: transactionID \n        }, 'post').then(transaction => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionsToAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;          \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsToAddress, address, limit, offset);\n\n        return this.getTransactionsRelated(address, 'to', limit, offset, callback);\n    }\n\n    getTransactionsFromAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;           \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsFromAddress, address, limit, offset);\n\n        return this.getTransactionsRelated(address, 'from', limit, offset, callback);\n    }\n\n    async getTransactionsRelated(address = this.tronWeb.defaultAddress.hex, direction = 'all', limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;         \n        }\n\n        if(utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsRelated, address, direction, limit, offset);\n\n        if(![ 'to', 'from', 'all' ].includes(direction))\n            return callback('Invalid direction provided: Expected \"to\", \"from\" or \"all\"');\n        \n        if(direction == 'all') {\n            try {\n                const from = await this.getTransactionsRelated(address, 'from', limit, offset);\n                const to = await this.getTransactionsRelated(address, 'to', limit, offset);\n\n                return callback(null, [\n                    ...from.map(tx => (tx.direction = 'from', tx)),\n                    ...to.map(tx => (tx.direction = 'to', tx))\n                ].sort((a, b) => b.raw_data.timestamp - a.raw_data.timestamp));\n            } catch(ex) {\n                return callback(ex);\n            }\n        }\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request(`walletextension/gettransactions${direction}this`, {\n            account: {\n                address\n            },\n            offset,\n            limit\n        }, 'post').then(({ transaction }) => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getAccount, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBalance, address);\n\n        this.getAccount(address).then(({ balance = 0 }) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getBandwidth(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBandwidth, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccountnet', {\n            address\n        }, 'post').then(({ freeNetUsed = 0, freeNetLimit = 0, NetUsed = 0, NetLimit = 0 }) => {\n            callback(null, (freeNetLimit - freeNetUsed) + (NetLimit - NetUsed));\n        }).catch(err => callback(err));\n    }\n\n    getTokensIssuedByAddress(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;            \n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTokensIssuedByAddress, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyaccount', {\n            address\n        }, 'post').then(({ assetIssue = false }) => {\n            if(!assetIssue)\n                return callback(null, {});\n\n            const tokens = assetIssue.map(token => {\n                return this.parseToken(token);\n            }).reduce((tokens, token) => {\n                return tokens[token.name] = token, tokens;\n            }, {});\n\n            callback(null, tokens);\n        }).catch(err => callback(err));\n    }\n\n    getTokenFromID(tokenID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTokenFromID, tokenID);\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if(!token.name)\n                return callback('Token does not exist');\n                \n            callback(null, this.parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    listNodes(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listNodes);\n\n        this.tronWeb.fullNode.request('wallet/listnodes').then(({ nodes = [] }) => {\n            callback(null, nodes.map(({ address: { host, port } }) => (\n                `${this.tronWeb.toUtf8(host)}:${port}`\n            )));\n        }).catch(err => callback(err));\n    }\n\n    getBlockRange(start = 0, end = 30, callback = false) {\n        if(utils.isFunction(end)) {\n            callback = end;\n            end = 30;            \n        }\n\n        if(utils.isFunction(start)) {\n            callback = start;\n            start = 0;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockRange, start, end);\n\n        if(!utils.isInteger(start) || start < 0)\n            return callback('Invalid start of range provided');\n\n        if(!utils.isInteger(end) || end <= start)\n            return callback('Invalid end of range provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbylimitnext', { \n            startNum: parseInt(start),\n            endNum: parseInt(end) + 1\n        }, 'post').then(({ block = [] }) => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    listSuperRepresentatives(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listSuperRepresentatives);\n\n        this.tronWeb.fullNode.request('wallet/listwitnesses').then(({ witnesses = [] }) => {\n            callback(null, witnesses);\n        }).catch(err => callback(err));\n    }\n\n    listTokens(limit = 0, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;            \n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 0;  \n        }\n        \n        if(!callback)\n            return this.injectPromise(this.listTokens, limit, offset);\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        if(!limit) {\n            return this.tronWeb.fullNode.request('wallet/getassetissuelist').then(({ assetIssue = [] }) => {\n                callback(null, assetIssue.map(token => this.parseToken(token)));\n            }).catch(err => callback(err));\n        }\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedassetissuelist', {\n            offset: parseInt(offset),\n            limit: parseInt(limit)\n        }, 'post').then(({ assetIssue = [] }) => {\n            callback(null, assetIssue.map(token => this.parseToken(token)));\n        }).catch(err => callback(err));\n    }\n\n    timeUntilNextVoteCycle(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.timeUntilNextVoteCycle);\n\n        this.tronWeb.fullNode.request('wallet/getnextmaintenancetime').then(({ num = -1 }) => {\n            if(num == -1)\n                return callback('Failed to get time until next vote cycle');\n\n            callback(null, Math.floor(num / 1000));\n        }).catch(err => callback(err));\n    }\n\n    getContract(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getContract, contractAddress);\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        contractAddress = this.tronWeb.address.toHex(contractAddress);\n\n        this.tronWeb.fullNode.request('wallet/getcontract', {\n            value: contractAddress\n        }).then(contract => {\n            if(contract.Error)\n                return callback('Contract does not exist');\n\n            callback(null, contract);\n        }).catch(err => callback(err));\n    }\n\n    sign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sign, transaction, privateKey);\n\n        if(!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if(transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            const address = this.tronWeb.address.toHex(\n                this.tronWeb.address.fromPrivateKey(privateKey)\n            ).toLowerCase();\n\n            if(address !== transaction.raw_data.contract[0].parameter.value.owner_address.toLowerCase())\n                return callback('Private key does not match address in transaction');\n\n            return callback(null,\n                utils.crypto.signTransaction(privateKey, transaction)\n            );\n        } catch(ex) {\n            callback(ex);\n        }\n    }\n\n    sendRawTransaction(signedTransaction = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.sendRawTransaction, signedTransaction);\n\n        if(!utils.isObject(signedTransaction))\n            return callback('Invalid transaction provided');\n\n        if(!signedTransaction.signature || !utils.isArray(signedTransaction.signature))\n            return callback('Transaction is not signed');\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasttransaction', \n            signedTransaction,\n            'post'\n        ).then(result => {\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async sendTransaction(to = false, amount = false, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sendTransaction, to, amount, privateKey);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.sendTrx(to, amount, address);\n            const signedTransaction = await this.sign(transaction, privateKey);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    async sendToken(to = false, amount = false, tokenID = false, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, privateKey);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isString(tokenID))\n            return callback('Invalid token ID provided');\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.sendToken(to, amount, tokenID, address);\n            const signedTransaction = await this.sign(transaction, privateKey);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    send(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    sendTrx(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    broadcast(...args) {\n        return this.sendRawTransaction(...args);\n    }\n\n    signTransaction(...args) {\n        return this.sign(...args);\n    }\n\n    /**\n     * Gets a network modification proposal by ID.\n     */\n    getProposal(proposalID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getProposal, proposalID);\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/getproposalbyid', { \n            id: parseInt(proposalID),\n        }, 'post').then(proposal => {\n            callback(null, proposal);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listProposals(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listProposals);\n\n        this.tronWeb.fullNode.request('wallet/listproposals').then(({ proposals = [] }) => {\n            callback(null, proposals);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all parameters available for network modification proposals.\n     */\n    getChainParameters(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getChainParameters);\n\n        this.tronWeb.fullNode.request('wallet/getchainparameters').then(({ proposals = [] }) => {\n            callback(null, proposals);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    getAccountResources(address = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/getaccountresource', { \n            address: this.tronWeb.address.toHex(address),\n        }, 'post').then(proposal => {\n            callback(null, proposal);\n        }).catch(err => callback(err));\n    }\n};","export default class Witness {\n    \n}","import Ethers from 'ethers';\nimport utils from 'utils';\n\nconst abiCoder = new Ethers.utils.AbiCoder();\n\nconst getFunctionSelector = abi => {\n    return abi.name + '(' + getParamTypes(abi.inputs || []).join(',') + ')';\n}\n\nconst getParamTypes = params => {\n    return params.map(({ type }) => type);\n}\n\nconst decodeOutput = (abi, output) => {\n    const names = abi.map(({ name }) => name).filter(name => !!name);\n    const types = abi.map(({ type }) => type);\n\n    return abiCoder.decode(types, output).reduce((obj, arg, index) => {\n        if(types[index] == 'address')\n            arg = '41' + arg.substr(2).toLowerCase();\n\n        if(names.length)\n            obj[names[index]] = arg;\n        else obj.push(arg);\n\n        return obj;\n    }, names.length ? {} : []);\n};\n\nexport default class Method {\n    constructor(contract, abi) {\n        this.tronWeb = contract.tronWeb;\n        this.contract = contract;\n\n        this.abi = abi;        \n        this.name = abi.name;\n\n        this.inputs = abi.inputs || [];\n        this.outputs = abi.outputs || [];\n\n        this.signature = this.tronWeb.sha3(abi.name).slice(0, 8);\n        this.functionSelector = getFunctionSelector(abi);\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.defaultOptions = {\n            feeLimit: 1000000000,\n            callValue: 0,\n            from: this.tronWeb.defaultAddress.hex, // Only used for send()\n            shouldPollResponse: true // Only used for sign()\n        };\n    }\n\n    onMethod(...args) {\n        const types = getParamTypes(this.inputs);\n\n        args.forEach((arg, index) => {\n            if(types[index] == 'address')\n                args[index] = this.tronWeb.address.toHex(arg).replace(/^(41)/, '0x')\n        });\n\n        return {\n            call: (...methodArgs) => this._call(types, args, ...methodArgs),\n            send: (...methodArgs) => this._send(types, args, ...methodArgs),\n            watch: (...methodArgs) => this._watch(...methodArgs)\n        }\n    }\n\n    async _call(types, args, options = {}, callback = false) {                \n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n            \n        if(!callback)\n            return this.injectPromise(this._call, types, args, options);\n\n        if(types.length !== args.length)\n            return callback('Invalid argument count provided');\n\n        if(!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if(!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const { stateMutability } = this.abi;\n\n        if(![ 'pure', 'view' ].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use send()`);\n\n        options = { ...this.defaultOptions, ...options };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        this.tronWeb.transactionBuilder.triggerSmartContract(\n            this.contract.address,\n            this.functionSelector,\n            options.feeLimit,\n            options.callValue,\n            parameters,\n            this.tronWeb.address.toHex(options.from),\n        (err, transaction) => {\n            if(err) \n                return callback(err);\n\n            if(!utils.hasProperty(transaction, 'constant_result'))\n                return callback('Failed to execute');\n\n            try {\n                let output = decodeOutput(this.outputs, '0x' + transaction.constant_result[0]);\n                \n                if(output.length === 1)\n                    output = output[0];\n\n                return callback(null, output);\n            } catch(ex) {\n                return callback(ex);\n            }\n        });\n    }\n\n    async _send(types, args, options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n            \n        if(!callback)\n            return this.injectPromise(this._send, types, args, options, privateKey);\n\n        if(types.length !== args.length)\n            throw new Error('Invalid argument count provided');\n\n        if(!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if(!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        if(!privateKey || !utils.isString(privateKey))\n            return callback('Invalid private key provided');\n\n        const { stateMutability } = this.abi;\n\n        if([ 'pure', 'view' ].includes(stateMutability.toLowerCase()))\n                return callback(`Methods with state mutability \"${stateMutability}\" must use call()`);\n\n        options = { ...this.defaultOptions, ...options };\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.triggerSmartContract(\n                this.contract.address,\n                this.functionSelector,\n                options.feeLimit,\n                options.callValue,\n                parameters,\n                this.tronWeb.address.toHex(address)\n            );\n\n            if(!transaction.result || !transaction.result.result)\n                return callback('Unknown error: ' + JSON.stringify(transaction, null, 2));\n\n            const signedTransaction = await this.tronWeb.trx.sign(transaction.transaction, privateKey);\n            const broadcast = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if(!broadcast.result)\n                return callback('Unknown error: ' + JSON.stringify(broadcast, null, 2));\n\n            if(!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if(index == 20) {\n                    return callback({ \n                        error: 'Cannot find result in solidity node', \n                        transaction: signedTransaction\n                    });\n                }\n                \n                const output = await this.tronWeb.trx.getTransactionInfo(signedTransaction.txID);\n\n                if(!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if(output.result && output.result == 'FAILED') {\n                    return callback({\n                        error: this.tronWeb.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if(!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if(decoded.length === 1)\n                    decoded = decoded[0];\n\n                return callback(null, decoded);\n            }\n\n            checkResult();                    \n        } catch(ex) {\n            return callback(ex);\n        }\n    }\n\n    async _watch(callback = false) {\n        if(!utils.isFunction(callback))\n            throw new Error('Expected callback to be provided');\n        \n        if(!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if(this.abi.type.toLowerCase() !== 'event')\n            return callback('Invalid method type for event watching');\n\n        if(!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        let listener = false;\n        let lastBlock = false;\n\n        const getEvents = async () => {\n            try {\n                const events = await this.tronWeb.getEventResult(this.contract.address, this.name);\n                const [ latestEvent ] = events.sort((a, b) => b.block - a.block);\n                const newEvents = events.filter((event, index) => {\n                    const duplicate = events.slice(0, index).some(priorEvent => (\n                        JSON.stringify(priorEvent) == JSON.stringify(event)\n                    ));\n\n                    if(duplicate)\n                        return false;\n\n                    if(!lastBlock)\n                        return true;            \n\n                    return event.block > lastBlock;\n                });\n\n                if(latestEvent)\n                    lastBlock = latestEvent.block;\n\n                return newEvents;\n            } catch(ex) {\n                return Promise.reject(ex);\n            }\n        };\n\n        const bindListener = () => {\n            if(listener)\n                clearInterval(listener);\n\n            listener = setInterval(() => {\n                getEvents().then(events => events.forEach(event => {\n                    callback(null, utils.parseEvent(event, this.abi))\n                })).catch(err => callback(err));\n            }, 3000);\n        };\n\n        await getEvents();\n        bindListener();\n\n        return {\n            start: bindListener(),\n            stop: () => {\n                if(!listener)\n                    return;\n\n                clearInterval(listener);\n                listener = false;\n            }\n        }\n    }\n}","import TronWeb from 'index';\nimport utils from 'utils';\nimport Method from './method';\n\nexport default class Contract {\n    constructor(tronWeb = false, abi = [], address = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.address = address;\n        this.abi = abi;\n\n        this.eventListener = false;\n        this.bytecode = false;        \n        this.deployed = false;\n        this.lastBlock = false;  \n\n        this.methods = {};\n        this.props = [];\n\n        if(this.tronWeb.isAddress(address))\n            this.deployed = true;\n        else this.address = false;\n\n        this.loadAbi(abi);\n    }\n\n    async _getEvents() {\n        const events = await this.tronWeb.getEventResult(this.address);\n        const [ latestEvent ] = events.sort((a, b) => b.block - a.block);\n        const newEvents = events.filter((event, index) => {\n            const duplicate = events.slice(0, index).some(priorEvent => (\n                JSON.stringify(priorEvent) == JSON.stringify(event)\n            ));\n\n            if(duplicate)\n                return false;\n            \n            if(!this.lastBlock)\n                return true;            \n\n            return event.block > this.lastBlock;\n        });\n\n        if(latestEvent)\n            this.lastBlock = latestEvent.block;\n\n        return newEvents;\n    }\n\n    async _startEventListener(callback) {\n        if(this.eventListener)\n            clearInterval(this.eventListener);\n\n        if(!this.tronWeb.eventServer)\n            throw new Error('Event server is not configured');\n\n        if(!this.address)\n            throw new Error('Contract is not configured with an address');\n\n        this.eventCallback = callback;\n        await this._getEvents();\n\n        this.eventListener = setInterval(() => {\n            this._getEvents().then(newEvents => newEvents.forEach(event => {\n                this.eventCallback && this.eventCallback(event)\n            })).catch(err => {\n                console.error('Failed to get event list', err);\n            });\n        }, 3000);\n    }\n\n    _stopEventListener() {\n        if(!this.eventListener)\n            return;\n\n        clearInterval(this.eventListener);\n        this.eventListener = false;\n        this.eventCallback = false;\n    }\n\n    hasProperty(property) {\n        return this.hasOwnProperty(property) || this.__proto__.hasOwnProperty(property);\n    }\n\n    loadAbi(abi) {\n        this.abi = abi;\n        this.methods = {};\n\n        this.props.forEach(prop => delete this[prop]);\n\n        abi.forEach(func => {\n            const method = new Method(this, func);\n            const methodCall = method.onMethod.bind(method);\n\n            const {\n                name,\n                functionSelector,\n                signature\n            } = method;\n\n            this.methods[name] = methodCall;\n            this.methods[functionSelector] = methodCall;\n            this.methods[signature] = methodCall;\n\n            if(!this.hasProperty(name)) {\n                this[name] = methodCall;\n                this.props.push(name);\n            }\n\n            if(!this.hasProperty(functionSelector)) {\n                this[functionSelector] = methodCall;\n                this.props.push(functionSelector);\n            }\n\n            if(!this.hasProperty(signature)) {\n                this[signature] = methodCall;\n                this.props.push(signature);\n            }\n        });\n    }\n\n    async new(options, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.new, options, privateKey);\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.createSmartContract(options, address);\n            const signedTransaction = await this.tronWeb.trx.sign(transaction, privateKey);\n            const contract = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if(!contract.result)\n                return callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            return this.at(signedTransaction.contract_address, callback);\n        } catch(ex) {\n            return callback(ex);\n        }        \n    }\n\n    async at(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.at, contractAddress);\n\n        try {\n            const contract = await this.tronWeb.trx.getContract(contractAddress);\n\n            if(!contract.contract_address)\n                callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            this.address = contract.contract_address;\n            this.bytecode = contract.bytecode;\n            this.deployed = true;\n\n            this.loadAbi(contract.abi.entrys);\n\n            callback(null, this);\n        } catch(ex) {\n            if(ex.toString().includes('does not exist'))\n                return callback('Contract has not been deployed on the network');\n\n            return callback(ex);\n        }        \n    }\n\n    events(callback = false) {\n        if(!utils.isFunction(callback))\n            throw new Error('Callback function expected');\n\n        const self = this;\n\n        return {\n            start(startCallback = false) {\n                if(!startCallback) {\n                    self._startEventListener(callback);\n                    return this;\n                }\n\n                self._startEventListener(callback).then(() => {\n                    startCallback();\n                }).catch(err => {\n                    startCallback(err)\n                });\n\n                return this;\n            },\n            stop() {\n                self._stopEventListener();\n            }\n        };\n    }\n}","import providers from 'lib/providers';\nimport utils from 'utils';\nimport axios from 'axios';\nimport BigNumber from 'bignumber.js';\nimport { sha3_256 } from 'js-sha3';\n\nimport TransactionBuilder from 'lib/transactionBuilder';\nimport Trx from 'lib/trx';\nimport Witness from 'lib/witness';\nimport Contract from 'lib/contract';\n\nexport default class TronWeb {\n    static providers = providers;\n    static BigNumber = BigNumber;\n    \n    constructor(fullNode, solidityNode, eventServer = false, privateKey = false) {\n        if(utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if(utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n        \n        this.providers = providers;\n        this.BigNumber = BigNumber;\n\n        this.defaultBlock = false;\n        this.defaultPrivateKey = false;\n        this.defaultAddress = {\n            hex: false,\n            base58: false\n        };\n        \n        [\n            'sha3', 'toHex', 'toUtf8', 'fromUtf8',\n            'toAscii', 'fromAscii', 'toDecimal', 'fromDecimal',\n            'toSun', 'fromSun', 'toBigNumber', 'isAddress',\n            'compile', 'createAccount', 'address'\n        ].forEach(key => {\n            this[key] = TronWeb[key];\n        });\n\n        if(privateKey)\n            this.setPrivateKey(privateKey);\n\n        this.transactionBuilder = new TransactionBuilder(this);\n        this.trx = new Trx(this);\n        this.witness = new Witness(this);\n\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    setDefaultBlock(blockID = false) {\n        if(blockID === false || blockID == 'latest' || blockID == 'earliest' || blockID === 0)\n            return this.defaultBlock = blockID;\n\n        if(!utils.isInteger(blockID) || !blockID)\n            throw new Error('Invalid block ID provided');\n\n        this.defaultBlock = Math.abs(blockID);\n    }\n\n    setPrivateKey(privateKey) {\n        // Validate private key\n        try {\n            this.setAddress(\n                this.address.fromPrivateKey(privateKey)\n            );\n        } catch {\n            throw new Error('Invalid private key provided');\n        }\n\n        // TODO: Validate private key\n        this.defaultPrivateKey = privateKey;        \n    }\n\n    setAddress(address) {\n        if(!this.isAddress(address))\n            throw new Error('Invalid address provided');\n\n        const hex = this.address.toHex(address);\n        const base58 = this.address.fromHex(address);\n\n        if(this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== base58)\n           this.defaultPrivateKey = false;\n\n        this.defaultAddress = {\n            hex,\n            base58\n        };\n    }\n\n    isValidProvider(provider) {\n        return Object.values(providers).some(knownProvider => provider instanceof knownProvider);\n    }\n\n    isEventServerConnected() {\n        if(!this.eventServer)\n            return false;\n\n        return axios.get(this.eventServer).then(({ data }) => {\n            return utils.hasProperty(data, '_links');\n        }).catch(() => false);\n    }\n\n    setFullNode(fullNode) {\n        if(utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if(!this.isValidProvider(fullNode))\n            throw new Error('Invalid full node provided');\n\n        this.fullNode = fullNode;\n        this.fullNode.setStatusPage('wallet/getnowblock');\n    }\n\n    setSolidityNode(solidityNode) {\n        if(utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if(!this.isValidProvider(solidityNode))\n            throw new Error('Invalid solidity node provided');\n\n        this.solidityNode = solidityNode;\n        this.solidityNode.setStatusPage('walletsolidity/getnowblock');\n    }\n\n    setEventServer(eventServer = false) {\n        if(eventServer !== false && !utils.isValidURL(eventServer))\n            throw new Error('Invalid URL provided for event server');\n\n        this.eventServer = eventServer;\n    }\n\n    currentProviders() {\n        return {\n            fullNode: this.fullNode,\n            solidityNode: this.solidityNode,\n            eventServer: this.eventServer\n        };\n    }\n\n    currentProvider() {\n        return this.currentProviders();\n    }\n\n    getEventResult(contractAddress = false, eventName = false, blockNumber = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getEventResult, contractAddress, eventName, blockNumber);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        const routeParams = [];\n\n        if(!this.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(eventName && !contractAddress)\n            return callback('Usage of event name filtering requires a contract address');\n        \n        if(blockNumber && !eventName)\n            return callback('Usage of block number filtering requires an event name');\n\n        if(contractAddress)\n            routeParams.push(this.address.fromHex(contractAddress));\n\n        if(eventName)\n            routeParams.push(eventName);\n\n        if(blockNumber)\n            routeParams.push(blockNumber);\n\n        return axios(`${this.eventServer}/event/contract/${routeParams.join('/')}`).then(({ data = false }) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null, \n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err)); \n    }\n\n    getEventByTransacionID(transactionID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getEventByTransacionID, transactionID);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        return axios(`${this.eventServer}/event/transaction/${transactionID}`).then(({ data = false }) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null, \n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n    contract(abi = [], address = false) {\n        return new Contract(this, abi, address);\n    }\n\n    static get address() {\n        return {\n            fromHex(address) {\n                if(!utils.isHex(address))\n                    return address;\n\n                return utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address)\n                );\n            },\n            toHex(address) {\n                if(utils.isHex(address))\n                    return address.toLowerCase();\n\n                return utils.code.byteArray2hexStr(\n                    utils.crypto.decodeBase58Address(address)\n                ).toLowerCase();\n            },\n            fromPrivateKey(privateKey) {\n                try {\n                    return utils.crypto.pkToAddress(privateKey);\n                } catch { return false; }\n            }\n        }\n    }\n\n    static sha3(string) {\n        return sha3_256(string);\n    }\n\n    static toHex(val) {\n        if(utils.isBoolean(val))\n            return TronWeb.fromDecimal(+val);\n\n        if(utils.isBigNumber(val))\n            return TronWeb.fromDecimal(val);\n\n        if(typeof val === 'object')\n            return TronWeb.fromUtf8(JSON.stringify(val));\n\n        if(utils.isString(val)) {\n            if(val.indexOf('-0x') === 0)\n                return TronWeb.fromDecimal(val);\n\n            if(val.indexOf('0x') === 0)\n                return val;\n\n            if(!isFinite(val))\n                return TronWeb.fromUtf8(val);\n        }\n\n        return TronWeb.fromDecimal(val);\n    }\n\n    static toUtf8(hex) {\n        return Buffer.from(hex, 'hex').toString('utf8');\n    }\n\n    static fromUtf8(string) {\n        return Buffer.from(string, 'utf8').toString('hex');\n    }\n\n    static toAscii(hex) {\n        return Buffer.from(hex, 'hex').toString('ascii');\n    }\n\n    static fromAscii(string, padding) {\n        return Buffer.from(string, 'ascii').toString('hex').padEnd(padding, '0');\n    }\n\n    static toDecimal(value) {\n        return TronWeb.toBigNumber(value).toNumber();\n    }\n\n    static fromDecimal(value) {\n        const number = TronWeb.toBigNumber(value);\n        const result = number.toString(16);\n\n        return number.lessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n    }\n\n    static fromSun(sun) {\n        const trx = TronWeb.toBigNumber(trx).div(1_000_000);        \n        return utils.isBigNumber(sun) ? trx : trx.toString(10);\n    }\n\n    static toSun(trx) {\n        const sun = TronWeb.toBigNumber(trx).times(1_000_000);        \n        return utils.isBigNumber(trx) ? sun : sun.toString(10);\n    }\n\n    static toBigNumber(amount = 0) {\n        if(utils.isBigNumber(amount))\n            return amount;\n\n        if(utils.isString(amount) && (amount.indexOf('0x') === 0 || amount.indexOf('-0x') === 0))\n            return new BigNumber(amount.replace('0x', ''), 16);\n\n        return new BigNumber(amount.toString(10), 10);\n    }\n\n    static isAddress(address = false) {\n        if(!utils.isString(address))\n            return false;\n\n        // Convert HEX to Base58\n        if(address.length === 42) {\n            return TronWeb.isAddress(\n                utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address)\n                )\n            );\n        }\n\n        return utils.crypto.isAddressValid(address);\n    }\n\n    // TODO\n    static compile(solditySource) {\n\n    }\n\n    static async createAccount(callback = false) {\n        const account = utils.accounts.generateAccount();\n\n        if(callback)\n            callback(null, account);\n\n        return account;\n    }\n\n    async isConnected(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.isConnected);\n\n        callback(null, {\n            fullNode: await this.fullNode.isConnected(),\n            solidityNode: await this.solidityNode.isConnected(),\n            eventServer: await this.isEventServerConnected()\n        });\n    }\n};"],"sourceRoot":""}